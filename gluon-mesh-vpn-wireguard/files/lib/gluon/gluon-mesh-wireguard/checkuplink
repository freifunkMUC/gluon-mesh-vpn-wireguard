#!/bin/sh

interface_linklocal() {
        # We generate a predictable v6 address
        local macaddr="$(echo $(uci get wireguard.wireguard.privatekey | wg pubkey) |md5sum|sed 's/^\(..\)\(..\)\(..\)\(..\)\(..\).*$/02:\1:\2:\3:\4:\5/')"
        local oldIFS="$IFS"; IFS=':'; set -- $macaddr; IFS="$oldIFS"

        echo "fe80::$1$2:$3ff:fe$4:$5$6"
}

#Wurde bereits ein privatekey generiert?
temp=$(uci get wireguard.wireguard.privatekey);
#Falls nicht, wird das hier nachgeholt
if [ "$?" -ne "0" ]; then
        uci set wireguard.wireguard.privatekey=$(wg genkey);
        uci commit wireguard
fi

#Ist wireguard Ã¼berhaupt aktiviert??
if [ "$(uci get wireguard.wireguard.enabled)" == "true" ] || [ "$(uci get wireguard.wireguard.enabled)" == "1" ]; then

        #Ab hier kommen die Tests, ob die Verbindung steht
        CONNECTED=1

        INTERFACE=$(uci get wireguard.wireguard.iface)

        # Wireguardinterface vorhanden???
        ip addr show dev $INTERFACE > /dev/null
        if [ $? != 0 ]; then
                CONNECTED=0
        fi

        # VXLAN Interface vorhanden??
        if [ $CONNECTED != 0 ]; then
                ip addr show dev vxlan-wan > /dev/null
                if [ $? != 0 ]; then
                        CONNECTED=0
                fi
        fi

        # Funktioniert das VXLAN Interface ueberhaupt? Also gehen Daten rueber?
        if [ $CONNECTED != 0 ]; then
                RXBYTES=$(ip -statistics link show dev vxlan-wan |  sed '4q;d' | awk '{print $1}')
                if [ $RXBYTES == 0 ]; then
                        CONNECTED=0
                fi
        fi

        # Und funktioniert das Wireguardinterface? Kann ich den Server erreichen?
        if [ $CONNECTED != 0 ]; then
                ping -c1 -w2  $(uci get wireguard.wireguard.mcastgroup)%$INTERFACE
                if [ $? != 0 ]; then
                        CONNECTED=0
                fi
        fi
	
        # Wenn die Tests fehlgeschlagen sind, neu connecten
        if [ $CONNECTED == 0 ]; then

		# Falls ein Fehler bei Wireguard war, Module entladen und neuladen
		rmmod wireguard
		sleep 1
		modprobe wireguard                                                       

                NUMBER_OF_PEERS=$(uci show wireguard | egrep -e peer_[0-9].endpoint | wc -l)
                PEER=$(awk 'BEGIN{srand();print int(rand()*($NUMBER_OF_PEERS)+1) }')
                                                                                                 
		#Die alten peers loeschen
		wg set $INTERFACE peer  $(wg |  awk 'BEGIN {RS=""} /endpoint/ {print $2}') remove
                batctl if del vxlan-wan
                ip link delete dev vxlan-wan
                ip link delete dev $INTERFACE
                PUBLICKEY=$(uci get wireguard.wireguard.privatekey | wg pubkey)
                echo $(uci get wireguard.wireguard.privatekey) > /tmp/wgpriv

                # Public Key zum vorher ausgesuchten Server hochladen
                #curl -s -k --data-urlencode "pubkey=$PUBLICKEY" https://$URL/wireguard.php
		ip link add dev $INTERFACE type wireguard
                wg set $INTERFACE private-key /tmp/wgpriv
                sleep 5

                wg set $INTERFACE peer $(uci get wireguard.peer_$PEER.publickey) persistent-keepalive 25 allowed-ips $(uci get uci get wireguard.peer_$PEER.link_address)/128 endpoint $(uci get wireguard.peer_$PEER.endpoint)
                ip link set up dev $INTERFACE
                ip address add "$(interface_linklocal "$INTERFACE")"/64 dev $INTERFACE

                sleep 5
                ip link add vxlan-wan type vxlan id "$(lua -e 'print(tonumber(require("gluon.util").domain_seed_bytes("gluon-mesh-vxlan", 3), 16))')" remote $(uci get uci get wireguard.peer_$PEER.link_address) dstport 4789 dev $INTERFACE
                ip link set up dev vxlan-wan
                sleep 5
                batctl if add vxlan-wan
                ip6tables -A INPUT -i $INTERFACE -j ACCEPT
                ip6tables -A FORWARD -i $INTERFACE -j ACCEPT

        fi
fi
